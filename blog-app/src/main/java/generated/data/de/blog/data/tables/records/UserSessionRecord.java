/*
 * This file is generated by jOOQ.
 */
package de.blog.data.tables.records;


import de.blog.data.tables.UserSession;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSessionRecord extends UpdatableRecordImpl<UserSessionRecord> implements Record7<String, String, Long, Long, Integer, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_session.primary_id</code>.
     */
    public UserSessionRecord setPrimaryId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.user_session.primary_id</code>.
     */
    @NotNull
    @Size(max = 36)
    public String getPrimaryId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.user_session.session_id</code>.
     */
    public UserSessionRecord setSessionId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.user_session.session_id</code>.
     */
    @NotNull
    @Size(max = 36)
    public String getSessionId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.user_session.creation_time</code>.
     */
    public UserSessionRecord setCreationTime(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.user_session.creation_time</code>.
     */
    @NotNull
    public Long getCreationTime() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.user_session.last_access_time</code>.
     */
    public UserSessionRecord setLastAccessTime(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.user_session.last_access_time</code>.
     */
    @NotNull
    public Long getLastAccessTime() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.user_session.max_inactive_interval</code>.
     */
    public UserSessionRecord setMaxInactiveInterval(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.user_session.max_inactive_interval</code>.
     */
    @NotNull
    public Integer getMaxInactiveInterval() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.user_session.expiry_time</code>.
     */
    public UserSessionRecord setExpiryTime(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.user_session.expiry_time</code>.
     */
    @NotNull
    public Long getExpiryTime() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.user_session.principal_name</code>.
     */
    public UserSessionRecord setPrincipalName(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.user_session.principal_name</code>.
     */
    @Size(max = 100)
    public String getPrincipalName() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Long, Long, Integer, Long, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, Long, Long, Integer, Long, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UserSession.USER_SESSION.PRIMARY_ID;
    }

    @Override
    public Field<String> field2() {
        return UserSession.USER_SESSION.SESSION_ID;
    }

    @Override
    public Field<Long> field3() {
        return UserSession.USER_SESSION.CREATION_TIME;
    }

    @Override
    public Field<Long> field4() {
        return UserSession.USER_SESSION.LAST_ACCESS_TIME;
    }

    @Override
    public Field<Integer> field5() {
        return UserSession.USER_SESSION.MAX_INACTIVE_INTERVAL;
    }

    @Override
    public Field<Long> field6() {
        return UserSession.USER_SESSION.EXPIRY_TIME;
    }

    @Override
    public Field<String> field7() {
        return UserSession.USER_SESSION.PRINCIPAL_NAME;
    }

    @Override
    public String component1() {
        return getPrimaryId();
    }

    @Override
    public String component2() {
        return getSessionId();
    }

    @Override
    public Long component3() {
        return getCreationTime();
    }

    @Override
    public Long component4() {
        return getLastAccessTime();
    }

    @Override
    public Integer component5() {
        return getMaxInactiveInterval();
    }

    @Override
    public Long component6() {
        return getExpiryTime();
    }

    @Override
    public String component7() {
        return getPrincipalName();
    }

    @Override
    public String value1() {
        return getPrimaryId();
    }

    @Override
    public String value2() {
        return getSessionId();
    }

    @Override
    public Long value3() {
        return getCreationTime();
    }

    @Override
    public Long value4() {
        return getLastAccessTime();
    }

    @Override
    public Integer value5() {
        return getMaxInactiveInterval();
    }

    @Override
    public Long value6() {
        return getExpiryTime();
    }

    @Override
    public String value7() {
        return getPrincipalName();
    }

    @Override
    public UserSessionRecord value1(String value) {
        setPrimaryId(value);
        return this;
    }

    @Override
    public UserSessionRecord value2(String value) {
        setSessionId(value);
        return this;
    }

    @Override
    public UserSessionRecord value3(Long value) {
        setCreationTime(value);
        return this;
    }

    @Override
    public UserSessionRecord value4(Long value) {
        setLastAccessTime(value);
        return this;
    }

    @Override
    public UserSessionRecord value5(Integer value) {
        setMaxInactiveInterval(value);
        return this;
    }

    @Override
    public UserSessionRecord value6(Long value) {
        setExpiryTime(value);
        return this;
    }

    @Override
    public UserSessionRecord value7(String value) {
        setPrincipalName(value);
        return this;
    }

    @Override
    public UserSessionRecord values(String value1, String value2, Long value3, Long value4, Integer value5, Long value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserSessionRecord
     */
    public UserSessionRecord() {
        super(UserSession.USER_SESSION);
    }

    /**
     * Create a detached, initialised UserSessionRecord
     */
    public UserSessionRecord(String primaryId, String sessionId, Long creationTime, Long lastAccessTime, Integer maxInactiveInterval, Long expiryTime, String principalName) {
        super(UserSession.USER_SESSION);

        setPrimaryId(primaryId);
        setSessionId(sessionId);
        setCreationTime(creationTime);
        setLastAccessTime(lastAccessTime);
        setMaxInactiveInterval(maxInactiveInterval);
        setExpiryTime(expiryTime);
        setPrincipalName(principalName);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserSessionRecord
     */
    public UserSessionRecord(de.blog.data.tables.pojos.UserSession value) {
        super(UserSession.USER_SESSION);

        if (value != null) {
            setPrimaryId(value.getPrimaryId());
            setSessionId(value.getSessionId());
            setCreationTime(value.getCreationTime());
            setLastAccessTime(value.getLastAccessTime());
            setMaxInactiveInterval(value.getMaxInactiveInterval());
            setExpiryTime(value.getExpiryTime());
            setPrincipalName(value.getPrincipalName());
            resetChangedOnNotNull();
        }
    }
}
