/*
 * This file is generated by jOOQ.
 */
package de.blog.data.tables.daos;


import de.blog.data.tables.UserEntity;
import de.blog.data.tables.records.UserEntityRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserEntityDao extends DAOImpl<UserEntityRecord, de.blog.data.tables.pojos.UserEntity, UUID> {

    /**
     * Create a new UserEntityDao without any configuration
     */
    public UserEntityDao() {
        super(UserEntity.USER_ENTITY, de.blog.data.tables.pojos.UserEntity.class);
    }

    /**
     * Create a new UserEntityDao with an attached configuration
     */
    @Autowired
    public UserEntityDao(Configuration configuration) {
        super(UserEntity.USER_ENTITY, de.blog.data.tables.pojos.UserEntity.class, configuration);
    }

    @Override
    public UUID getId(de.blog.data.tables.pojos.UserEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchById(UUID... values) {
        return fetch(UserEntity.USER_ENTITY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.blog.data.tables.pojos.UserEntity fetchOneById(UUID value) {
        return fetchOne(UserEntity.USER_ENTITY.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<de.blog.data.tables.pojos.UserEntity> fetchOptionalById(UUID value) {
        return fetchOptional(UserEntity.USER_ENTITY.ID, value);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByUsername(String... values) {
        return fetch(UserEntity.USER_ENTITY.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    public de.blog.data.tables.pojos.UserEntity fetchOneByUsername(String value) {
        return fetchOne(UserEntity.USER_ENTITY.USERNAME, value);
    }

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    public Optional<de.blog.data.tables.pojos.UserEntity> fetchOptionalByUsername(String value) {
        return fetchOptional(UserEntity.USER_ENTITY.USERNAME, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByPassword(String... values) {
        return fetch(UserEntity.USER_ENTITY.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>salt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfSalt(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.SALT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>salt IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchBySalt(String... values) {
        return fetch(UserEntity.USER_ENTITY.SALT, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByEmail(String... values) {
        return fetch(UserEntity.USER_ENTITY.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public de.blog.data.tables.pojos.UserEntity fetchOneByEmail(String value) {
        return fetchOne(UserEntity.USER_ENTITY.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<de.blog.data.tables.pojos.UserEntity> fetchOptionalByEmail(String value) {
        return fetchOptional(UserEntity.USER_ENTITY.EMAIL, value);
    }

    /**
     * Fetch records that have <code>email_verified BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfEmailVerified(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.EMAIL_VERIFIED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email_verified IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByEmailVerified(Boolean... values) {
        return fetch(UserEntity.USER_ENTITY.EMAIL_VERIFIED, values);
    }

    /**
     * Fetch records that have <code>firstname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfFirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.FIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>firstname IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByFirstname(String... values) {
        return fetch(UserEntity.USER_ENTITY.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>lastname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfLastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.LASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastname IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByLastname(String... values) {
        return fetch(UserEntity.USER_ENTITY.LASTNAME, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(UserEntity.USER_ENTITY.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfCreatedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByCreatedBy(UUID... values) {
        return fetch(UserEntity.USER_ENTITY.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(UserEntity.USER_ENTITY.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchRangeOfUpdatedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserEntity.USER_ENTITY.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserEntity> fetchByUpdatedBy(UUID... values) {
        return fetch(UserEntity.USER_ENTITY.UPDATED_BY, values);
    }
}
