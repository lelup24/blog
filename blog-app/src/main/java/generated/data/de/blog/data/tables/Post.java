/*
 * This file is generated by jOOQ.
 */
package de.blog.data.tables;


import de.blog.data.Keys;
import de.blog.data.Public;
import de.blog.data.tables.records.PostRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Post extends TableImpl<PostRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.post</code>
     */
    public static final Post POST = new Post();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostRecord> getRecordType() {
        return PostRecord.class;
    }

    /**
     * The column <code>public.post.id</code>.
     */
    public final TableField<PostRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.post.title</code>.
     */
    public final TableField<PostRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.post.content</code>.
     */
    public final TableField<PostRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.post.created_at</code>.
     */
    public final TableField<PostRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.post.created_by</code>.
     */
    public final TableField<PostRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.post.updated_at</code>.
     */
    public final TableField<PostRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.post.updated_by</code>.
     */
    public final TableField<PostRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID, this, "");

    private Post(Name alias, Table<PostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Post(Name alias, Table<PostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.post</code> table reference
     */
    public Post(String alias) {
        this(DSL.name(alias), POST);
    }

    /**
     * Create an aliased <code>public.post</code> table reference
     */
    public Post(Name alias) {
        this(alias, POST);
    }

    /**
     * Create a <code>public.post</code> table reference
     */
    public Post() {
        this(DSL.name("post"), null);
    }

    public <O extends Record> Post(Table<O> child, ForeignKey<O, PostRecord> key) {
        super(child, key, POST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PostRecord> getPrimaryKey() {
        return Keys.POST_PKEY;
    }

    @Override
    public List<ForeignKey<PostRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POST__POST_CREATED_BY_FKEY, Keys.POST__POST_UPDATED_BY_FKEY);
    }

    private transient UserEntity _postCreatedByFkey;
    private transient UserEntity _postUpdatedByFkey;

    /**
     * Get the implicit join path to the <code>public.user_entity</code> table,
     * via the <code>post_created_by_fkey</code> key.
     */
    public UserEntity postCreatedByFkey() {
        if (_postCreatedByFkey == null)
            _postCreatedByFkey = new UserEntity(this, Keys.POST__POST_CREATED_BY_FKEY);

        return _postCreatedByFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user_entity</code> table,
     * via the <code>post_updated_by_fkey</code> key.
     */
    public UserEntity postUpdatedByFkey() {
        if (_postUpdatedByFkey == null)
            _postUpdatedByFkey = new UserEntity(this, Keys.POST__POST_UPDATED_BY_FKEY);

        return _postUpdatedByFkey;
    }

    @Override
    public Post as(String alias) {
        return new Post(DSL.name(alias), this);
    }

    @Override
    public Post as(Name alias) {
        return new Post(alias, this);
    }

    @Override
    public Post as(Table<?> alias) {
        return new Post(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(String name) {
        return new Post(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Name name) {
        return new Post(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Table<?> name) {
        return new Post(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, String, LocalDateTime, UUID, LocalDateTime, UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super String, ? super String, ? super LocalDateTime, ? super UUID, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super String, ? super String, ? super LocalDateTime, ? super UUID, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
