/*
 * This file is generated by jOOQ.
 */
package de.blog.data.tables.daos;


import de.blog.data.tables.Post;
import de.blog.data.tables.records.PostRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class PostDao extends DAOImpl<PostRecord, de.blog.data.tables.pojos.Post, UUID> {

    /**
     * Create a new PostDao without any configuration
     */
    public PostDao() {
        super(Post.POST, de.blog.data.tables.pojos.Post.class);
    }

    /**
     * Create a new PostDao with an attached configuration
     */
    @Autowired
    public PostDao(Configuration configuration) {
        super(Post.POST, de.blog.data.tables.pojos.Post.class, configuration);
    }

    @Override
    public UUID getId(de.blog.data.tables.pojos.Post object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Post.POST.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchById(UUID... values) {
        return fetch(Post.POST.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.blog.data.tables.pojos.Post fetchOneById(UUID value) {
        return fetchOne(Post.POST.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<de.blog.data.tables.pojos.Post> fetchOptionalById(UUID value) {
        return fetchOptional(Post.POST.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Post.POST.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchByTitle(String... values) {
        return fetch(Post.POST.TITLE, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Post.POST.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchByContent(String... values) {
        return fetch(Post.POST.CONTENT, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Post.POST.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Post.POST.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchRangeOfCreatedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Post.POST.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchByCreatedBy(UUID... values) {
        return fetch(Post.POST.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Post.POST.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Post.POST.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchRangeOfUpdatedBy(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Post.POST.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Post> fetchByUpdatedBy(UUID... values) {
        return fetch(Post.POST.UPDATED_BY, values);
    }
}
