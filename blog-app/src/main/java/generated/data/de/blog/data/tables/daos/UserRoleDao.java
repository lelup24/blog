/*
 * This file is generated by jOOQ.
 */
package de.blog.data.tables.daos;


import de.blog.data.tables.UserRole;
import de.blog.data.tables.records.UserRoleRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserRoleDao extends DAOImpl<UserRoleRecord, de.blog.data.tables.pojos.UserRole, Record2<UUID, UUID>> {

    /**
     * Create a new UserRoleDao without any configuration
     */
    public UserRoleDao() {
        super(UserRole.USER_ROLE, de.blog.data.tables.pojos.UserRole.class);
    }

    /**
     * Create a new UserRoleDao with an attached configuration
     */
    @Autowired
    public UserRoleDao(Configuration configuration) {
        super(UserRole.USER_ROLE, de.blog.data.tables.pojos.UserRole.class, configuration);
    }

    @Override
    public Record2<UUID, UUID> getId(de.blog.data.tables.pojos.UserRole object) {
        return compositeKeyRecord(object.getUserId(), object.getRoleId());
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserRole> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserRole> fetchByUserId(UUID... values) {
        return fetch(UserRole.USER_ROLE.USER_ID, values);
    }

    /**
     * Fetch records that have <code>role_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserRole> fetchRangeOfRoleId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.ROLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role_id IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserRole> fetchByRoleId(UUID... values) {
        return fetch(UserRole.USER_ROLE.ROLE_ID, values);
    }
}
