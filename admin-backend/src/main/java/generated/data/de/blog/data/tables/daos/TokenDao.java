/*
 * This file is generated by jOOQ.
 */
package de.blog.data.tables.daos;


import de.blog.data.tables.Token;
import de.blog.data.tables.records.TokenRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TokenDao extends DAOImpl<TokenRecord, de.blog.data.tables.pojos.Token, UUID> {

    /**
     * Create a new TokenDao without any configuration
     */
    public TokenDao() {
        super(Token.TOKEN, de.blog.data.tables.pojos.Token.class);
    }

    /**
     * Create a new TokenDao with an attached configuration
     */
    @Autowired
    public TokenDao(Configuration configuration) {
        super(Token.TOKEN, de.blog.data.tables.pojos.Token.class, configuration);
    }

    @Override
    public UUID getId(de.blog.data.tables.pojos.Token object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Token> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Token.TOKEN.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Token> fetchById(UUID... values) {
        return fetch(Token.TOKEN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.blog.data.tables.pojos.Token fetchOneById(UUID value) {
        return fetchOne(Token.TOKEN.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<de.blog.data.tables.pojos.Token> fetchOptionalById(UUID value) {
        return fetchOptional(Token.TOKEN.ID, value);
    }

    /**
     * Fetch records that have <code>session_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Token> fetchRangeOfSessionId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Token.TOKEN.SESSION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>session_id IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Token> fetchBySessionId(UUID... values) {
        return fetch(Token.TOKEN.SESSION_ID, values);
    }

    /**
     * Fetch records that have <code>token BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Token> fetchRangeOfToken(String lowerInclusive, String upperInclusive) {
        return fetchRange(Token.TOKEN.TOKEN_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Token> fetchByToken(String... values) {
        return fetch(Token.TOKEN.TOKEN_, values);
    }

    /**
     * Fetch a unique record that has <code>token = value</code>
     */
    public de.blog.data.tables.pojos.Token fetchOneByToken(String value) {
        return fetchOne(Token.TOKEN.TOKEN_, value);
    }

    /**
     * Fetch a unique record that has <code>token = value</code>
     */
    public Optional<de.blog.data.tables.pojos.Token> fetchOptionalByToken(String value) {
        return fetchOptional(Token.TOKEN.TOKEN_, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.Token> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Token.TOKEN.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.Token> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Token.TOKEN.CREATED_AT, values);
    }
}
