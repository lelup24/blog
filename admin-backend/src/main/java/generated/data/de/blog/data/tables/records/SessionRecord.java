/*
 * This file is generated by jOOQ.
 */
package de.blog.data.tables.records;


import de.blog.data.tables.Session;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionRecord extends UpdatableRecordImpl<SessionRecord> implements Record8<UUID, UUID, String, Boolean, String, LocalDateTime, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.session.id</code>.
     */
    public SessionRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.session.id</code>.
     */
    @NotNull
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.session.user_id</code>.
     */
    public SessionRecord setUserId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.session.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.session.remote_address</code>.
     */
    public SessionRecord setRemoteAddress(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.session.remote_address</code>.
     */
    @Size(max = 255)
    public String getRemoteAddress() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.session.revoked</code>.
     */
    public SessionRecord setRevoked(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.session.revoked</code>.
     */
    public Boolean getRevoked() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.session.token</code>.
     */
    public SessionRecord setToken(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.session.token</code>.
     */
    public String getToken() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.session.expires_at</code>.
     */
    public SessionRecord setExpiresAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.session.expires_at</code>.
     */
    public LocalDateTime getExpiresAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.session.created_at</code>.
     */
    public SessionRecord setCreatedAt(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.session.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.session.updated_at</code>.
     */
    public SessionRecord setUpdatedAt(LocalDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.session.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, String, Boolean, String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<UUID, UUID, String, Boolean, String, LocalDateTime, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Session.SESSION.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Session.SESSION.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return Session.SESSION.REMOTE_ADDRESS;
    }

    @Override
    public Field<Boolean> field4() {
        return Session.SESSION.REVOKED;
    }

    @Override
    public Field<String> field5() {
        return Session.SESSION.TOKEN;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Session.SESSION.EXPIRES_AT;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Session.SESSION.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Session.SESSION.UPDATED_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getRemoteAddress();
    }

    @Override
    public Boolean component4() {
        return getRevoked();
    }

    @Override
    public String component5() {
        return getToken();
    }

    @Override
    public LocalDateTime component6() {
        return getExpiresAt();
    }

    @Override
    public LocalDateTime component7() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component8() {
        return getUpdatedAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getRemoteAddress();
    }

    @Override
    public Boolean value4() {
        return getRevoked();
    }

    @Override
    public String value5() {
        return getToken();
    }

    @Override
    public LocalDateTime value6() {
        return getExpiresAt();
    }

    @Override
    public LocalDateTime value7() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value8() {
        return getUpdatedAt();
    }

    @Override
    public SessionRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SessionRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public SessionRecord value3(String value) {
        setRemoteAddress(value);
        return this;
    }

    @Override
    public SessionRecord value4(Boolean value) {
        setRevoked(value);
        return this;
    }

    @Override
    public SessionRecord value5(String value) {
        setToken(value);
        return this;
    }

    @Override
    public SessionRecord value6(LocalDateTime value) {
        setExpiresAt(value);
        return this;
    }

    @Override
    public SessionRecord value7(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public SessionRecord value8(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SessionRecord values(UUID value1, UUID value2, String value3, Boolean value4, String value5, LocalDateTime value6, LocalDateTime value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SessionRecord
     */
    public SessionRecord() {
        super(Session.SESSION);
    }

    /**
     * Create a detached, initialised SessionRecord
     */
    public SessionRecord(UUID id, UUID userId, String remoteAddress, Boolean revoked, String token, LocalDateTime expiresAt, LocalDateTime createdAt, LocalDateTime updatedAt) {
        super(Session.SESSION);

        setId(id);
        setUserId(userId);
        setRemoteAddress(remoteAddress);
        setRevoked(revoked);
        setToken(token);
        setExpiresAt(expiresAt);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SessionRecord
     */
    public SessionRecord(de.blog.data.tables.pojos.Session value) {
        super(Session.SESSION);

        if (value != null) {
            setId(value.getId());
            setUserId(value.getUserId());
            setRemoteAddress(value.getRemoteAddress());
            setRevoked(value.getRevoked());
            setToken(value.getToken());
            setExpiresAt(value.getExpiresAt());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
