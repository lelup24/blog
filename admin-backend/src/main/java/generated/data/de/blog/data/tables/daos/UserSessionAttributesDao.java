/*
 * This file is generated by jOOQ.
 */
package de.blog.data.tables.daos;


import de.blog.data.tables.UserSessionAttributes;
import de.blog.data.tables.records.UserSessionAttributesRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserSessionAttributesDao extends DAOImpl<UserSessionAttributesRecord, de.blog.data.tables.pojos.UserSessionAttributes, Record2<String, String>> {

    /**
     * Create a new UserSessionAttributesDao without any configuration
     */
    public UserSessionAttributesDao() {
        super(UserSessionAttributes.USER_SESSION_ATTRIBUTES, de.blog.data.tables.pojos.UserSessionAttributes.class);
    }

    /**
     * Create a new UserSessionAttributesDao with an attached configuration
     */
    @Autowired
    public UserSessionAttributesDao(Configuration configuration) {
        super(UserSessionAttributes.USER_SESSION_ATTRIBUTES, de.blog.data.tables.pojos.UserSessionAttributes.class, configuration);
    }

    @Override
    public Record2<String, String> getId(de.blog.data.tables.pojos.UserSessionAttributes object) {
        return compositeKeyRecord(object.getSessionPrimaryId(), object.getAttributeName());
    }

    /**
     * Fetch records that have <code>session_primary_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserSessionAttributes> fetchRangeOfSessionPrimaryId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserSessionAttributes.USER_SESSION_ATTRIBUTES.SESSION_PRIMARY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>session_primary_id IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserSessionAttributes> fetchBySessionPrimaryId(String... values) {
        return fetch(UserSessionAttributes.USER_SESSION_ATTRIBUTES.SESSION_PRIMARY_ID, values);
    }

    /**
     * Fetch records that have <code>attribute_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserSessionAttributes> fetchRangeOfAttributeName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserSessionAttributes.USER_SESSION_ATTRIBUTES.ATTRIBUTE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>attribute_name IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserSessionAttributes> fetchByAttributeName(String... values) {
        return fetch(UserSessionAttributes.USER_SESSION_ATTRIBUTES.ATTRIBUTE_NAME, values);
    }

    /**
     * Fetch records that have <code>attribute_bytes BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<de.blog.data.tables.pojos.UserSessionAttributes> fetchRangeOfAttributeBytes(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(UserSessionAttributes.USER_SESSION_ATTRIBUTES.ATTRIBUTE_BYTES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>attribute_bytes IN (values)</code>
     */
    public List<de.blog.data.tables.pojos.UserSessionAttributes> fetchByAttributeBytes(byte[]... values) {
        return fetch(UserSessionAttributes.USER_SESSION_ATTRIBUTES.ATTRIBUTE_BYTES, values);
    }
}
