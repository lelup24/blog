/*
 * This file is generated by jOOQ.
 */
package de.blog.data.tables;


import de.blog.data.Keys;
import de.blog.data.Public;
import de.blog.data.tables.records.UserEntityRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEntity extends TableImpl<UserEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_entity</code>
     */
    public static final UserEntity USER_ENTITY = new UserEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserEntityRecord> getRecordType() {
        return UserEntityRecord.class;
    }

    /**
     * The column <code>public.user_entity.id</code>.
     */
    public final TableField<UserEntityRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_entity.username</code>.
     */
    public final TableField<UserEntityRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_entity.password</code>.
     */
    public final TableField<UserEntityRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_entity.salt</code>.
     */
    public final TableField<UserEntityRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.user_entity.email</code>.
     */
    public final TableField<UserEntityRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_entity.email_verified</code>.
     */
    public final TableField<UserEntityRecord, Boolean> EMAIL_VERIFIED = createField(DSL.name("email_verified"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.user_entity.firstname</code>.
     */
    public final TableField<UserEntityRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_entity.lastname</code>.
     */
    public final TableField<UserEntityRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_entity.created_at</code>.
     */
    public final TableField<UserEntityRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.user_entity.created_by</code>.
     */
    public final TableField<UserEntityRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user_entity.updated_at</code>.
     */
    public final TableField<UserEntityRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.user_entity.updated_by</code>.
     */
    public final TableField<UserEntityRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID, this, "");

    private UserEntity(Name alias, Table<UserEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserEntity(Name alias, Table<UserEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_entity</code> table reference
     */
    public UserEntity(String alias) {
        this(DSL.name(alias), USER_ENTITY);
    }

    /**
     * Create an aliased <code>public.user_entity</code> table reference
     */
    public UserEntity(Name alias) {
        this(alias, USER_ENTITY);
    }

    /**
     * Create a <code>public.user_entity</code> table reference
     */
    public UserEntity() {
        this(DSL.name("user_entity"), null);
    }

    public <O extends Record> UserEntity(Table<O> child, ForeignKey<O, UserEntityRecord> key) {
        super(child, key, USER_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserEntityRecord> getPrimaryKey() {
        return Keys.USER_ENTITY_PKEY;
    }

    @Override
    public List<UniqueKey<UserEntityRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_ENTITY_USERNAME_KEY, Keys.USER_ENTITY_EMAIL_KEY);
    }

    @Override
    public List<ForeignKey<UserEntityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ENTITY__USER_ENTITY_CREATED_BY_FKEY, Keys.USER_ENTITY__USER_ENTITY_UPDATED_BY_FKEY);
    }

    private transient UserEntity _userEntityCreatedByFkey;
    private transient UserEntity _userEntityUpdatedByFkey;

    /**
     * Get the implicit join path to the <code>public.user_entity</code> table,
     * via the <code>user_entity_created_by_fkey</code> key.
     */
    public UserEntity userEntityCreatedByFkey() {
        if (_userEntityCreatedByFkey == null)
            _userEntityCreatedByFkey = new UserEntity(this, Keys.USER_ENTITY__USER_ENTITY_CREATED_BY_FKEY);

        return _userEntityCreatedByFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user_entity</code> table,
     * via the <code>user_entity_updated_by_fkey</code> key.
     */
    public UserEntity userEntityUpdatedByFkey() {
        if (_userEntityUpdatedByFkey == null)
            _userEntityUpdatedByFkey = new UserEntity(this, Keys.USER_ENTITY__USER_ENTITY_UPDATED_BY_FKEY);

        return _userEntityUpdatedByFkey;
    }

    @Override
    public UserEntity as(String alias) {
        return new UserEntity(DSL.name(alias), this);
    }

    @Override
    public UserEntity as(Name alias) {
        return new UserEntity(alias, this);
    }

    @Override
    public UserEntity as(Table<?> alias) {
        return new UserEntity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(String name) {
        return new UserEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(Name name) {
        return new UserEntity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(Table<?> name) {
        return new UserEntity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, String, String, String, String, Boolean, String, String, LocalDateTime, UUID, LocalDateTime, UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super LocalDateTime, ? super UUID, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super LocalDateTime, ? super UUID, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
